import 'package:workmanager/workmanager.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/material.dart';
import '../constants/app_constants.dart';
import 'notification_service.dart';

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
@pragma('vm:entry-point')
void callbackDispatcher() {
  Workmanager().executeTask((task, inputData) async {
    try {
      switch (task) {
        case 'japa_reminder_task':
          await _handleJapaReminder();
          break;
        case 'japa_schedule_check':
          await _handleScheduleCheck();
          break;
        case 'japa_progress_sync':
          await _handleProgressSync();
          break;
        default:
          print('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: $task');
      }
      return true;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: $e');
      return false;
    }
  });
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–∂–∞–ø–µ
Future<void> _handleJapaReminder() async {
  final prefs = await SharedPreferences.getInstance();
  final isEnabled = prefs.getBool('japa_reminders_enabled') ?? true;
  
  if (!isEnabled) return;
  
  final now = DateTime.now();
  final lastJapaDate = prefs.getString('last_japa_date');
  final lastJapa = lastJapaDate != null ? DateTime.parse(lastJapaDate) : null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∂–∞–ø—ã
  if (lastJapa != null) {
    final hoursSinceLastJapa = now.difference(lastJapa).inHours;
    if (hoursSinceLastJapa < 12) return; // –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è (–¥–∂–∞–ø–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º)
  final hour = now.hour;
  if (hour >= 4 && hour <= 8 || hour >= 17 && hour <= 21) {
    await NotificationService.showJapaReminder(
      title: '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
      body: '–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!',
    );
  }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
Future<void> _handleScheduleCheck() async {
  final prefs = await SharedPreferences.getInstance();
  final scheduledTime = prefs.getString('japa_scheduled_time');
  
  if (scheduledTime != null) {
    final scheduled = DateTime.parse(scheduledTime);
    final now = DateTime.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã
    if (now.hour == scheduled.hour && now.minute == scheduled.minute) {
      await NotificationService.showJapaReminder(
        title: '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
        body: '–ü—Ä–∏—à–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.',
        payload: 'scheduled_japa',
      );
    }
  }
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
Future<void> _handleProgressSync() async {
  final prefs = await SharedPreferences.getInstance();
  final lastSync = prefs.getString('last_progress_sync');
  
  if (lastSync != null) {
    final lastSyncDate = DateTime.parse(lastSync);
    final now = DateTime.now();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑ –≤ –¥–µ–Ω—å
    if (now.difference(lastSyncDate).inDays >= 1) {
      await _syncProgress();
      await prefs.setString('last_progress_sync', now.toIso8601String());
    }
  }
}

/// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
Future<void> _syncProgress() async {
  final prefs = await SharedPreferences.getInstance();
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º
  // –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  final totalRounds = prefs.getInt('total_rounds') ?? 0;
  final totalSessions = prefs.getInt('total_sessions') ?? 0;
  final totalTime = prefs.getInt('total_time_minutes') ?? 0;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
  final today = DateTime.now().toIso8601String().split('T')[0];
  final dailyStats = prefs.getString('daily_stats_$today');
  
  if (dailyStats != null) {
    final stats = Map<String, dynamic>.from(
      dailyStats as Map<String, dynamic>
    );
    stats['total_rounds'] = totalRounds;
    stats['total_sessions'] = totalSessions;
    stats['total_time_minutes'] = totalTime;
    await prefs.setString('daily_stats_$today', stats.toString());
  }
}

/// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
class BackgroundService {
  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  static Future<void> registerJapaReminder() async {
    await Workmanager().registerPeriodicTask(
      'japa_reminder',
      'japa_reminder_task',
      frequency: const Duration(hours: 1),
      constraints: Constraints(
        networkType: NetworkType.not_required,
        requiresBatteryNotLow: false,
        requiresCharging: false,
        requiresDeviceIdle: false,
        requiresStorageNotLow: false,
      ),
    );
  }
  
  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  static Future<void> registerScheduleCheck() async {
    await Workmanager().registerPeriodicTask(
      'japa_schedule',
      'japa_schedule_check',
      frequency: const Duration(minutes: 15),
      constraints: Constraints(
        networkType: NetworkType.not_required,
        requiresBatteryNotLow: false,
        requiresCharging: false,
        requiresDeviceIdle: false,
        requiresStorageNotLow: false,
      ),
    );
  }
  
  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  static Future<void> registerProgressSync() async {
    await Workmanager().registerPeriodicTask(
      'japa_progress',
      'japa_progress_sync',
      frequency: const Duration(hours: 6),
      constraints: Constraints(
        networkType: NetworkType.connected,
        requiresBatteryNotLow: false,
        requiresCharging: false,
        requiresDeviceIdle: false,
        requiresStorageNotLow: false,
      ),
    );
  }
  
  /// –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  static Future<void> cancelAllTasks() async {
    await Workmanager().cancelAll();
  }
  
  /// –û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
  static Future<void> cancelTask(String uniqueName) async {
    await Workmanager().cancelByUniqueName(uniqueName);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
  static Future<bool> areBackgroundTasksEnabled() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∑–∞–¥–∞—á–∏
      final prefs = await SharedPreferences.getInstance();
      final hasRegisteredTasks = prefs.getBool('background_tasks_registered') ?? false;
      return hasRegisteredTasks;
    } catch (e) {
      return false;
    }
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  static Future<void> setDailyReminderTime(TimeOfDay time) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('daily_reminder_time', '${time.hour}:${time.minute}');
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await NotificationService.scheduleDailyReminder(
      time: time,
      title: '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
      body: '–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!',
    );
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  static Future<TimeOfDay?> getDailyReminderTime() async {
    final prefs = await SharedPreferences.getInstance();
    final timeString = prefs.getString('daily_reminder_time');
    
    if (timeString != null) {
      final parts = timeString.split(':');
      if (parts.length == 2) {
        return TimeOfDay(
          hour: int.parse(parts[0]),
          minute: int.parse(parts[1]),
        );
      }
    }
    
    return null;
  }
  
  /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  static Future<void> setRemindersEnabled(bool enabled) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('japa_reminders_enabled', enabled);
    
    if (!enabled) {
      await NotificationService.cancelAll();
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  static Future<bool> areRemindersEnabled() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('japa_reminders_enabled') ?? true;
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∂–∞–ø—ã
  static Future<void> setJapaSchedule(List<TimeOfDay> times) async {
    final prefs = await SharedPreferences.getInstance();
    final scheduleStrings = times.map((t) => '${t.hour}:${t.minute}').toList();
    await prefs.setStringList('japa_schedule', scheduleStrings);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    for (int i = 0; i < times.length; i++) {
      await Workmanager().registerOneOffTask(
        'japa_schedule_$i',
        'japa_schedule_check',
        inputData: {'scheduled_time': '${times[i].hour}:${times[i].minute}'},
        constraints: Constraints(
          networkType: NetworkType.not_required,
          requiresBatteryNotLow: false,
          requiresCharging: false,
          requiresDeviceIdle: false,
          requiresStorageNotLow: false,
        ),
      );
    }
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∂–∞–ø—ã
  static Future<List<TimeOfDay>> getJapaSchedule() async {
    final prefs = await SharedPreferences.getInstance();
    final scheduleStrings = prefs.getStringList('japa_schedule') ?? [];
    
    return scheduleStrings.map((s) {
      final parts = s.split(':');
      return TimeOfDay(
        hour: int.parse(parts[0]),
        minute: int.parse(parts[1]),
      );
    }).toList();
  }
}

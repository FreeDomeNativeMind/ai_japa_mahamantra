import 'dart:async';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/achievement.dart';
import '../models/japa_session.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
class AchievementService {
  static final AchievementService _instance = AchievementService._internal();
  factory AchievementService() => _instance;
  AchievementService._internal();

  static const String _achievementsKey = 'achievements';
  static const String _progressKey = 'achievement_progress';
  static const String _statsKey = 'achievement_stats';

  List<Achievement> _achievements = [];
  Map<String, AchievementProgress> _progress = {};
  AchievementStats? _stats;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> initialize() async {
    await _loadAchievements();
    await _loadProgress();
    await _loadStats();
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (_achievements.isEmpty) {
      await _createDefaultAchievements();
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadAchievements() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final achievementsJson = prefs.getString(_achievementsKey);
      
      if (achievementsJson != null) {
        final List<dynamic> achievementsList = json.decode(achievementsJson);
        _achievements = achievementsList
            .map((json) => Achievement.fromJson(json))
            .toList();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _loadProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressJson = prefs.getString(_progressKey);
      
      if (progressJson != null) {
        final Map<String, dynamic> progressMap = json.decode(progressJson);
        _progress = progressMap.map(
          (key, value) => MapEntry(key, AchievementProgress.fromJson(value)),
        );
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _loadStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final statsJson = prefs.getString(_statsKey);
      
      if (statsJson != null) {
        _stats = AchievementStats.fromJson(json.decode(statsJson));
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> _saveAchievements() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final achievementsJson = json.encode(
        _achievements.map((achievement) => achievement.toJson()).toList(),
      );
      await prefs.setString(_achievementsKey, achievementsJson);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _saveProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressJson = json.encode(
        _progress.map((key, value) => MapEntry(key, value.toJson())),
      );
      await prefs.setString(_progressKey, progressJson);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _saveStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      if (_stats != null) {
        final statsJson = json.encode(_stats!.toJson());
        await prefs.setString(_statsKey, statsJson);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  Future<void> _createDefaultAchievements() async {
    _achievements = [
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Å—Å–∏–π
      Achievement(
        id: 'first_session',
        title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –¥–∂–∞–ø—ã',
        type: AchievementType.sessionCount,
        rarity: AchievementRarity.common,
        icon: 'üéØ',
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_first_session'],
        metadata: {'category': 'beginner'},
      ),
      
      Achievement(
        id: 'dedicated_practitioner',
        title: '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 —Å–µ—Å—Å–∏–π –¥–∂–∞–ø—ã',
        type: AchievementType.sessionCount,
        rarity: AchievementRarity.rare,
        icon: 'üïâÔ∏è',
        targetValue: 10,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_dedicated', 'title_practitioner'],
        metadata: {'category': 'dedication'},
      ),
      
      Achievement(
        id: 'japa_master',
        title: '–ú–∞—Å—Ç–µ—Ä –¥–∂–∞–ø—ã',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 100 —Å–µ—Å—Å–∏–π –¥–∂–∞–ø—ã',
        type: AchievementType.sessionCount,
        rarity: AchievementRarity.epic,
        icon: 'üëë',
        targetValue: 100,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_master', 'title_master', 'unlock_special_sounds'],
        metadata: {'category': 'mastery'},
      ),
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—Ä—É–≥–æ–≤
      Achievement(
        id: 'first_round',
        title: '–ü–µ—Ä–≤—ã–π –∫—Ä—É–≥',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—Ä—É–≥ –¥–∂–∞–ø—ã',
        type: AchievementType.roundCount,
        rarity: AchievementRarity.common,
        icon: 'üîÑ',
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_first_round'],
        metadata: {'category': 'beginner'},
      ),
      
      Achievement(
        id: 'hundred_rounds',
        title: '–°–æ—Ç–Ω—è –∫—Ä—É–≥–æ–≤',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 100 –∫—Ä—É–≥–æ–≤ –¥–∂–∞–ø—ã',
        type: AchievementType.roundCount,
        rarity: AchievementRarity.rare,
        icon: 'üíØ',
        targetValue: 100,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_hundred', 'title_centurion'],
        metadata: {'category': 'milestone'},
      ),
      
      Achievement(
        id: 'thousand_rounds',
        title: '–¢—ã—Å—è—á–∞ –∫—Ä—É–≥–æ–≤',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 1000 –∫—Ä—É–≥–æ–≤ –¥–∂–∞–ø—ã',
        type: AchievementType.roundCount,
        rarity: AchievementRarity.legendary,
        icon: 'üåü',
        targetValue: 1000,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_thousand', 'title_legend', 'unlock_golden_theme'],
        metadata: {'category': 'legendary'},
      ),
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      Achievement(
        id: 'one_hour',
        title: '–ß–∞—Å –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 1 —á–∞—Å –≤ –¥–∂–∞–ø–µ',
        type: AchievementType.timeSpent,
        rarity: AchievementRarity.common,
        icon: '‚è∞',
        targetValue: 3600, // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_one_hour'],
        metadata: {'category': 'time'},
      ),
      
      Achievement(
        id: 'ten_hours',
        title: '–î–µ—Å—è—Ç—å —á–∞—Å–æ–≤',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 10 —á–∞—Å–æ–≤ –≤ –¥–∂–∞–ø–µ',
        type: AchievementType.timeSpent,
        rarity: AchievementRarity.rare,
        icon: 'üïê',
        targetValue: 36000, // 10 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_ten_hours', 'title_time_keeper'],
        metadata: {'category': 'time'},
      ),
      
      Achievement(
        id: 'hundred_hours',
        title: '–°—Ç–æ —á–∞—Å–æ–≤',
        description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 100 —á–∞—Å–æ–≤ –≤ –¥–∂–∞–ø–µ',
        type: AchievementType.timeSpent,
        rarity: AchievementRarity.epic,
        icon: '‚è≥',
        targetValue: 360000, // 100 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_hundred_hours', 'title_time_master', 'unlock_meditation_timer'],
        metadata: {'category': 'time'},
      ),
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏—è–º
      Achievement(
        id: 'three_day_streak',
        title: '–¢—Ä–µ—Ö–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥–∂–∞–ø—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        type: AchievementType.streak,
        rarity: AchievementRarity.common,
        icon: 'üî•',
        targetValue: 3,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_three_day'],
        metadata: {'category': 'streak'},
      ),
      
      Achievement(
        id: 'week_streak',
        title: '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥–∂–∞–ø—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        type: AchievementType.streak,
        rarity: AchievementRarity.rare,
        icon: 'üìÖ',
        targetValue: 7,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_week', 'title_consistent'],
        metadata: {'category': 'streak'},
      ),
      
      Achievement(
        id: 'month_streak',
        title: '–ú–µ—Å—è—á–Ω–∞—è —Å–µ—Ä–∏—è',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥–∂–∞–ø—É 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        type: AchievementType.streak,
        rarity: AchievementRarity.epic,
        icon: 'üóìÔ∏è',
        targetValue: 30,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_month', 'title_unstoppable', 'unlock_daily_reminder'],
        metadata: {'category': 'streak'},
      ),
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      Achievement(
        id: 'early_bird',
        title: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥–∂–∞–ø—É –¥–æ 6 —É—Ç—Ä–∞',
        type: AchievementType.special,
        rarity: AchievementRarity.rare,
        icon: 'üåÖ',
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_early_bird', 'title_morning_practitioner'],
        metadata: {'category': 'special', 'time_requirement': 'before_6am'},
      ),
      
      Achievement(
        id: 'night_owl',
        title: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
        description: '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥–∂–∞–ø—É –ø–æ—Å–ª–µ 10 –≤–µ—á–µ—Ä–∞',
        type: AchievementType.special,
        rarity: AchievementRarity.rare,
        icon: 'üåô',
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_night_owl', 'title_evening_practitioner'],
        metadata: {'category': 'special', 'time_requirement': 'after_10pm'},
      ),
      
      Achievement(
        id: 'perfect_session',
        title: '–ò–¥–µ–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–µ—Å—Å–∏—é –±–µ–∑ –ø–∞—É–∑',
        type: AchievementType.special,
        rarity: AchievementRarity.epic,
        icon: '‚ú®',
        targetValue: 1,
        currentValue: 0,
        isUnlocked: false,
        rewards: ['badge_perfect', 'title_flawless'],
        metadata: {'category': 'special', 'requirement': 'no_pauses'},
      ),
    ];
    
    await _saveAchievements();
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Å—Å–∏–∏ –¥–∂–∞–ø—ã
  Future<List<Achievement>> updateProgressFromSession(JapaSession session) async {
    final List<Achievement> newlyUnlocked = [];
    
    for (final achievement in _achievements) {
      if (achievement.isUnlocked) continue;
      
      int newValue = achievement.currentValue;
      bool shouldUnlock = false;
      
      switch (achievement.type) {
        case AchievementType.sessionCount:
          newValue++;
          break;
        case AchievementType.roundCount:
          newValue += session.completedRounds;
          break;
        case AchievementType.timeSpent:
          newValue += session.duration.inSeconds;
          break;
        case AchievementType.streak:
          // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Ä–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
          break;
        case AchievementType.special:
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          if (achievement.id == 'early_bird' && _isEarlyMorning(session.startTime)) {
            newValue = 1;
            shouldUnlock = true;
          } else if (achievement.id == 'night_owl' && _isLateEvening(session.startTime)) {
            newValue = 1;
            shouldUnlock = true;
          } else if (achievement.id == 'perfect_session' && !session.wasPaused) {
            newValue = 1;
            shouldUnlock = true;
          }
          break;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      if (newValue >= achievement.targetValue || shouldUnlock) {
        final updatedAchievement = achievement.copyWith(
          currentValue: newValue,
          isUnlocked: true,
          unlockedAt: DateTime.now(),
        );
        
        _achievements[_achievements.indexWhere((a) => a.id == achievement.id)] = updatedAchievement;
        newlyUnlocked.add(updatedAchievement);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        _progress[achievement.id] = AchievementProgress(
          achievementId: achievement.id,
          currentValue: newValue,
          isUnlocked: true,
          unlockedAt: DateTime.now(),
          lastUpdated: DateTime.now(),
        );
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
        _achievements[_achievements.indexWhere((a) => a.id == achievement.id)] = 
            achievement.copyWith(currentValue: newValue);
        
        _progress[achievement.id] = AchievementProgress(
          achievementId: achievement.id,
          currentValue: newValue,
          isUnlocked: false,
          lastUpdated: DateTime.now(),
        );
      }
    }
    
    await _saveAchievements();
    await _saveProgress();
    await _updateStats();
    
    return newlyUnlocked;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —Ä–∞–Ω–Ω–∏–º —É—Ç—Ä–æ–º
  bool _isEarlyMorning(DateTime time) {
    return time.hour < 6;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –ø–æ–∑–¥–Ω–∏–º –≤–µ—á–µ—Ä–æ–º
  bool _isLateEvening(DateTime time) {
    return time.hour >= 22;
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  Future<void> _updateStats() async {
    final unlockedAchievements = _achievements.where((a) => a.isUnlocked).toList();
    
    _stats = AchievementStats(
      totalAchievements: _achievements.length,
      unlockedAchievements: unlockedAchievements.length,
      commonCount: unlockedAchievements.where((a) => a.rarity == AchievementRarity.common).length,
      rareCount: unlockedAchievements.where((a) => a.rarity == AchievementRarity.rare).length,
      epicCount: unlockedAchievements.where((a) => a.rarity == AchievementRarity.epic).length,
      legendaryCount: unlockedAchievements.where((a) => a.rarity == AchievementRarity.legendary).length,
      completionPercentage: _achievements.isNotEmpty 
          ? (unlockedAchievements.length / _achievements.length) * 100 
          : 0.0,
      recentUnlocks: unlockedAchievements
          .where((a) => a.unlockedAt != null)
          .toList()
          ..sort((a, b) => b.unlockedAt!.compareTo(a.unlockedAt!))
          .take(5)
          .map((a) => a.id)
          .toList(),
      typeCounts: {
        for (final type in AchievementType.values)
          type: unlockedAchievements.where((a) => a.type == type).length,
      },
    );
    
    await _saveStats();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  List<Achievement> get achievements => List.unmodifiable(_achievements);

  /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  List<Achievement> get unlockedAchievements => 
      _achievements.where((a) => a.isUnlocked).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  List<Achievement> get lockedAchievements => 
      _achievements.where((a) => !a.isUnlocked).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É
  List<Achievement> getAchievementsByType(AchievementType type) =>
      _achievements.where((a) => a.type == type).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  List<Achievement> getAchievementsByRarity(AchievementRarity rarity) =>
      _achievements.where((a) => a.rarity == rarity).toList();

  /// –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID
  Achievement? getAchievementById(String id) =>
      _achievements.firstWhere((a) => a.id == id, orElse: () => throw StateError('Achievement not found'));

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  AchievementStats? get stats => _stats;

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  AchievementProgress? getProgress(String achievementId) => _progress[achievementId];

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetAchievements() async {
    _achievements.clear();
    _progress.clear();
    _stats = null;
    
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_achievementsKey);
    await prefs.remove(_progressKey);
    await prefs.remove(_statsKey);
    
    await _createDefaultAchievements();
  }
}

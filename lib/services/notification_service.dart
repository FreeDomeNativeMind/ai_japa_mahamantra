import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../constants/app_constants.dart';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications = 
      FlutterLocalNotificationsPlugin();
  
  static bool _isInitialized = false;
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );
    
    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );
    
    _isInitialized = true;
  }
  
  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –¥–∂–∞–ø—ã
  static Future<void> showJapaReminder({
    required String title,
    required String body,
    String? payload,
  }) async {
    if (!_isInitialized) return;
    
    const androidDetails = AndroidNotificationDetails(
      'japa_reminder_channel',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–∂–∞–ø–µ',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–∂–∞–ø—ã',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      sound: RawResourceAndroidNotificationSound('mantra_bell'),
      icon: '@mipmap/ic_launcher',
      color: Color(AppConstants.primaryColor),
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'mantra_bell.wav',
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    await _notifications.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      title,
      body,
      details,
      payload: payload,
    );
  }
  
  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—Ä—É–≥–∞
  static Future<void> showRoundComplete({
    required int roundNumber,
    required int totalRounds,
  }) async {
    if (!_isInitialized) return;
    
    const androidDetails = AndroidNotificationDetails(
      'japa_progress_channel',
      '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–∂–∞–ø—ã',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –¥–∂–∞–ø–µ',
      importance: Importance.medium,
      priority: Priority.medium,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      icon: '@mipmap/ic_launcher',
      color: Color(AppConstants.successColor),
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: false,
      presentSound: true,
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    await _notifications.show(
      roundNumber,
      '–ö—Ä—É–≥ $roundNumber –∑–∞–≤–µ—Ä—à–µ–Ω! üéâ',
      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É. –û—Å—Ç–∞–ª–æ—Å—å ${totalRounds - roundNumber} –∫—Ä—É–≥–æ–≤.',
      details,
      payload: 'round_complete',
    );
  }
  
  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
  static Future<void> showSessionComplete({
    required int completedRounds,
    required Duration sessionDuration,
  }) async {
    if (!_isInitialized) return;
    
    const androidDetails = AndroidNotificationDetails(
      'japa_session_channel',
      '–°–µ—Å—Å–∏–∏ –¥–∂–∞–ø—ã',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π –¥–∂–∞–ø—ã',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      sound: RawResourceAndroidNotificationSound('session_complete'),
      icon: '@mipmap/ic_launcher',
      color: Color(AppConstants.successColor),
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'session_complete.wav',
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    final minutes = sessionDuration.inMinutes;
    final seconds = sessionDuration.inSeconds % 60;
    
    await _notifications.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üïâÔ∏è',
      '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ $completedRounds –∫—Ä—É–≥–æ–≤ –∑–∞ ${minutes}–º ${seconds}—Å. –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞!',
      details,
      payload: 'session_complete',
    );
  }
  
  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∂–∞–ø—ã
  static Future<void> showJapaTimeReminder() async {
    if (!_isInitialized) return;
    
    const androidDetails = AndroidNotificationDetails(
      'japa_time_channel',
      '–í—Ä–µ–º—è –¥–∂–∞–ø—ã',
      channelDescription: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–∂–∞–ø—ã',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      sound: RawResourceAndroidNotificationSound('mantra_bell'),
      icon: '@mipmap/ic_launcher',
      color: Color(AppConstants.primaryColor),
      ongoing: false,
      autoCancel: true,
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'mantra_bell.wav',
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    await _notifications.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      '–í—Ä–µ–º—è –¥–ª—è –¥–∂–∞–ø—ã! üïâÔ∏è',
      '–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é.',
      details,
      payload: 'japa_time',
    );
  }
  
  /// –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  static Future<void> scheduleDailyReminder({
    required Time time,
    required String title,
    required String body,
  }) async {
    if (!_isInitialized) return;
    
    const androidDetails = AndroidNotificationDetails(
      'japa_daily_channel',
      '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      channelDescription: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–∂–∞–ø–µ',
      importance: Importance.high,
      priority: Priority.high,
      showWhen: true,
      enableVibration: true,
      playSound: true,
      icon: '@mipmap/ic_launcher',
      color: Color(AppConstants.primaryColor),
    );
    
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );
    
    const details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );
    
    await _notifications.zonedSchedule(
      1, // ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      title,
      body,
      _nextInstanceOfTime(time),
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation: 
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }
  
  /// –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<void> cancelAll() async {
    if (!_isInitialized) return;
    await _notifications.cancelAll();
  }
  
  /// –û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static Future<void> cancel(int id) async {
    if (!_isInitialized) return;
    await _notifications.cancel(id);
  }
  
  /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static void _onNotificationTapped(NotificationResponse response) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ: ${response.payload}');
  }
  
  /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static DateTime _nextInstanceOfTime(Time time) {
    final now = DateTime.now();
    var scheduledDate = DateTime(
      now.year,
      now.month,
      now.day,
      time.hour,
      time.minute,
      time.second,
    );
    
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    
    return scheduledDate;
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static Future<bool> areNotificationsEnabled() async {
    if (!_isInitialized) return false;
    
    final androidEnabled = await _notifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.areNotificationsEnabled();
    
    final iosEnabled = await _notifications
        .resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin>()
        ?.requestPermissions(
          alert: true,
          badge: true,
          sound: true,
        );
    
    return (androidEnabled ?? false) || (iosEnabled?.alert ?? false);
  }
}

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LocaleProvider extends ChangeNotifier {
  static const String _localeKey = 'selected_locale';
  
  Locale _currentLocale = const Locale('ru');
  
  Locale get currentLocale => _currentLocale;
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  static const List<Map<String, String>> availableLocales = [
    {
      'code': 'ru',
      'name': '–†—É—Å—Å–∫–∏–π',
      'nativeName': '–†—É—Å—Å–∫–∏–π',
      'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –¥—É—Ö–æ–≤–Ω—ã–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π',
      'flag': 'üá∑üá∫'
    },
    {
      'code': 'en',
      'name': 'Atreides',
      'nativeName': 'Atreides',
      'description': 'The language of House Atreides - noble and refined',
      'flag': 'üè∞'
    },
    {
      'code': 'harkonnen',
      'name': 'Harkonnen',
      'nativeName': '–•–ê–†–ö–û–ù–ù–ï–ù',
      'description': '–Ø–∑—ã–∫ –î–æ–º–∞ –•–∞—Ä–∫–æ–Ω–Ω–µ–Ω - —Å—É—Ä–æ–≤—ã–π –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π',
      'flag': '‚öîÔ∏è'
    },
  ];
  
  LocaleProvider() {
    _loadSavedLocale();
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å
  Future<void> _loadSavedLocale() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedLocaleCode = prefs.getString(_localeKey);
      
      if (savedLocaleCode != null) {
        _currentLocale = Locale(savedLocaleCode);
        notifyListeners();
      }
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale('ru');
    }
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å
  Future<void> setLocale(String localeCode) async {
    if (_currentLocale.languageCode == localeCode) return;
    
    _currentLocale = Locale(localeCode);
    
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_localeKey, localeCode);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    notifyListeners();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ –∫–æ–¥—É
  Map<String, String>? getLocaleInfo(String localeCode) {
    try {
      return availableLocales.firstWhere(
        (locale) => locale['code'] == localeCode,
      );
    } catch (e) {
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
  Map<String, String>? getCurrentLocaleInfo() {
    return getLocaleInfo(_currentLocale.languageCode);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–º
  bool get isRussian => _currentLocale.languageCode == 'ru';
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º (–ê—Ç—Ä–µ–π–¥–µ—Å)
  bool get isAtreides => _currentLocale.languageCode == 'en';
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ö–∞—Ä–∫–æ–Ω–Ω–µ–Ω—Å–∫–∏–º
  bool get isHarkonnen => _currentLocale.languageCode == 'harkonnen';
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  TextStyle getLanguageStyle() {
    if (isHarkonnen) {
      return const TextStyle(
        fontWeight: FontWeight.bold,
        fontSize: 16,
        letterSpacing: 1.2,
      );
    } else if (isAtreides) {
      return const TextStyle(
        fontWeight: FontWeight.w500,
        fontSize: 16,
        fontStyle: FontStyle.italic,
        letterSpacing: 0.5,
      );
    } else {
      // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
      return const TextStyle(
        fontWeight: FontWeight.normal,
        fontSize: 16,
      );
    }
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  ColorScheme getLanguageColorScheme() {
    if (isHarkonnen) {
      return const ColorScheme(
        brightness: Brightness.dark,
        primary: Color(0xFF8B0000), // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        onPrimary: Colors.white,
        secondary: Color(0xFF2F2F2F), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
        onSecondary: Colors.white,
        error: Color(0xFFDC143C), // Crimson
        onError: Colors.white,
        background: Color(0xFF1A1A1A), // –ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
        onBackground: Colors.white,
        surface: Color(0xFF2D2D2D), // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
        onSurface: Colors.white,
      );
    } else if (isAtreides) {
      return const ColorScheme(
        brightness: Brightness.light,
        primary: Color(0xFF1E3A8A), // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        onPrimary: Colors.white,
        secondary: Color(0xFF059669), // –ò–∑—É–º—Ä—É–¥–Ω—ã–π
        onSecondary: Colors.white,
        error: Color(0xFFDC2626), // –ö—Ä–∞—Å–Ω—ã–π
        onError: Colors.white,
        background: Color(0xFFF8FAFC), // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        onBackground: Color(0xFF1E293B), // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        surface: Colors.white,
        onSurface: Color(0xFF1E293B), // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
      );
    } else {
      // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ö–µ–º–∞
      return const ColorScheme(
        brightness: Brightness.light,
        primary: Color(0xFF8E24AA), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        onPrimary: Colors.white,
        secondary: Color(0xFFFF9800), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        onSecondary: Colors.white,
        error: Color(0xFFD32F2F), // –ö—Ä–∞—Å–Ω—ã–π
        onError: Colors.white,
        background: Color(0xFFF5F5F5), // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        onBackground: Colors.black,
        surface: Colors.white,
        onSurface: Colors.black,
      );
    }
  }
}

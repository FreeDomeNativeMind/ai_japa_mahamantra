import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LocaleProvider extends ChangeNotifier {
  static const String _localeKey = 'selected_locale';
  static const String _themeKey = 'selected_theme';
  
  Locale _currentLocale = const Locale('ru');
  bool _isDarkTheme = false;
  
  Locale get currentLocale => _currentLocale;
  bool get isDarkTheme => _isDarkTheme;
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
  static const List<Map<String, String>> availableLocales = [
    {
      'code': 'ru',
      'name': '–†—É—Å—Å–∫–∏–π',
      'nativeName': '–†—É—Å—Å–∫–∏–π',
      'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –¥—É—Ö–æ–≤–Ω—ã–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π',
      'flag': 'üá∑üá∫'
    },
    {
      'code': 'en',
      'name': 'English',
      'nativeName': 'English',
      'description': 'English language - international and modern',
      'flag': 'üá∫üá∏'
    },
    {
      'code': 'de',
      'name': 'Deutsch',
      'nativeName': 'Deutsch',
      'description': 'Deutsche Sprache - pr√§zise und strukturiert',
      'flag': 'üá©üá™'
    },
    {
      'code': 'harkonnen',
      'name': 'Harkonnen',
      'nativeName': '–•–ê–†–ö–û–ù–ù–ï–ù',
      'description': '–Ø–∑—ã–∫ –î–æ–º–∞ –•–∞—Ä–∫–æ–Ω–Ω–µ–Ω - —Å—É—Ä–æ–≤—ã–π –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π',
      'flag': '‚öîÔ∏è'
    },
  ];
  
  LocaleProvider() {
    _loadSavedLocale();
    _loadSavedTheme();
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞–ª—å
  Future<void> _loadSavedLocale() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedLocaleCode = prefs.getString(_localeKey);
      
      if (savedLocaleCode != null) {
        _currentLocale = Locale(savedLocaleCode);
        notifyListeners();
      }
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _currentLocale = const Locale('ru');
    }
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  Future<void> _loadSavedTheme() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      _isDarkTheme = prefs.getBool(_themeKey) ?? false;
      notifyListeners();
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      _isDarkTheme = false;
    }
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å
  Future<void> setLocale(String localeCode) async {
    if (_currentLocale.languageCode == localeCode) return;
    
    _currentLocale = Locale(localeCode);
    
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_localeKey, localeCode);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    notifyListeners();
  }
  
  /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É
  Future<void> toggleTheme() async {
    _isDarkTheme = !_isDarkTheme;
    
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_themeKey, _isDarkTheme);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    notifyListeners();
  }
  
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É
  Future<void> setTheme(bool isDark) async {
    if (_isDarkTheme == isDark) return;
    
    _isDarkTheme = isDark;
    
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_themeKey, _isDarkTheme);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    notifyListeners();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–æ –∫–æ–¥—É
  Map<String, String>? getLocaleInfo(String localeCode) {
    try {
      return availableLocales.firstWhere(
        (locale) => locale['code'] == localeCode,
      );
    } catch (e) {
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
  Map<String, String>? getCurrentLocaleInfo() {
    return getLocaleInfo(_currentLocale.languageCode);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–º
  bool get isRussian => _currentLocale.languageCode == 'ru';
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
  bool get isEnglish => _currentLocale.languageCode == 'en';
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ö–∞—Ä–∫–æ–Ω–Ω–µ–Ω—Å–∫–∏–º
  bool get isHarkonnen => _currentLocale.languageCode == 'harkonnen';
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  TextStyle getLanguageStyle() {
    if (isHarkonnen) {
      return const TextStyle(
        fontWeight: FontWeight.bold,
        fontSize: 16,
        letterSpacing: 1.2,
      );
    } else if (isEnglish) {
      return const TextStyle(
        fontWeight: FontWeight.w500,
        fontSize: 16,
        letterSpacing: 0.5,
      );
    } else {
      // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
      return const TextStyle(
        fontWeight: FontWeight.normal,
        fontSize: 16,
      );
    }
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
  ColorScheme getThemeColorScheme() {
    if (_isDarkTheme) {
      return const ColorScheme(
        brightness: Brightness.dark,
        primary: Color(0xFF8E24AA), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        onPrimary: Colors.white,
        secondary: Color(0xFFFF9800), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        onSecondary: Colors.white,
        error: Color(0xFFD32F2F), // –ö—Ä–∞—Å–Ω—ã–π
        onError: Colors.white,
        background: Color(0xFF121212), // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
        onBackground: Colors.white,
        surface: Color(0xFF1E1E1E), // –¢–µ–º–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        onSurface: Colors.white,
        surfaceVariant: Color(0xFF2D2D2D), // –í–∞—Ä–∏–∞–Ω—Ç —Ç–µ–º–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        onSurfaceVariant: Colors.white70,
      );
    } else {
      // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
      return const ColorScheme(
        brightness: Brightness.light,
        primary: Color(0xFF8E24AA), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        onPrimary: Colors.white,
        secondary: Color(0xFFFF9800), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        onSecondary: Colors.white,
        error: Color(0xFFD32F2F), // –ö—Ä–∞—Å–Ω—ã–π
        onError: Colors.white,
        background: Color(0xFFF5F5F5), // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        onBackground: Colors.black,
        surface: Colors.white, // –ë–µ–ª–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        onSurface: Colors.black,
        surfaceVariant: Color(0xFFF0F0F0), // –í–∞—Ä–∏–∞–Ω—Ç —Å–≤–µ—Ç–ª–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        onSurfaceVariant: Colors.black87,
      );
    }
  }
}

#!/usr/bin/env python3
"""
Chant Mantra - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É "–•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞" –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π AI Mozgach —á–µ—Ä–µ–∑ Ollama
"""

import requests
import json
import time
import logging
from typing import Dict, Any
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('chant.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class ChantMantra:
    def __init__(self, ollama_url: str = "http://localhost:11434", model_name: str = "mozgach", language: str = "russian"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã
        
        Args:
            ollama_url: URL Ollama —Å–µ—Ä–≤–µ—Ä–∞
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            language: –Ø–∑—ã–∫ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã ("russian" –∏–ª–∏ "thai")
        """
        self.ollama_url = ollama_url
        self.model_name = model_name
        self.language = language
        
        # –ú–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        self.mantras = {
            "russian": "–•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ –•–∞—Ä–µ –•–∞—Ä–µ –†–∞–º–∞ –•–∞—Ä–µ –†–∞–º–∞ –†–∞–º–∞ –†–∞–º–∞ –•–∞—Ä–µ –•–∞—Ä–µ",
            "russianscsm": "–•–∞—Ä–µ–π –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ–π –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –ö—Ä–∏—à–Ω–∞ –•–∞—Ä–µ–π –•–∞—Ä–µ –•–∞—Ä–µ–π –†–∞–º–∞ –•–∞—Ä–µ–π –†–∞–º–∞ –†–∞–º–∞ –†–∞–º–∞ –•–∞—Ä–µ–π –•–∞—Ä–µ",
            "thai": "‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏Å‡∏§‡∏©‡∏ì‡∏∞ ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏Å‡∏§‡∏©‡∏ì‡∏∞ ‡∏Å‡∏§‡∏©‡∏ì‡∏∞ ‡∏Å‡∏§‡∏©‡∏ì‡∏∞ ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏£‡∏≤‡∏° ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏£‡∏≤‡∏° ‡∏£‡∏≤‡∏° ‡∏£‡∏≤‡∏° ‡∏Æ‡∏≤‡πÄ‡∏£ ‡∏Æ‡∏≤‡πÄ‡∏£",
            "harkonnen": "·∏§ƒÅre K·πõ·π£·πáa ·∏§ƒÅre K·πõ·π£·πáa K·πõ·π£·πáa K·πõ·π£·πáa ·∏§ƒÅre ·∏§ƒÅre ·∏§ƒÅre RƒÅma ·∏§ƒÅre RƒÅma RƒÅma RƒÅma ·∏§ƒÅre ·∏§ƒÅre",
            "atreides": "HƒÅre K·πõ·π£·πáa HƒÅre K·πõ·π£·πáa K·πõ·π£·πáa K·πõ·π£·πáa HƒÅre HƒÅre HƒÅre RƒÅma HƒÅre RƒÅma RƒÅma RƒÅma HƒÅre HƒÅre",
            "freemen": "·∏§ƒÅre K·πõ·π£·πáa ·∏§ƒÅre K·πõ·π£·πáa K·πõ·π£·πáa K·πõ·π£·πáa ·∏§ƒÅre ·∏§ƒÅre ·∏§ƒÅre RƒÅma ·∏§ƒÅre RƒÅma RƒÅma RƒÅma ·∏§ƒÅre ·∏§ƒÅre"
        }
        
        self.mantra = self.mantras.get(language, self.mantras["russian"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        self.check_ollama_connection()
    
    def check_ollama_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                logging.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.ollama_url}")
                return True
            else:
                logging.error(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama: {e}")
            return False
    
    def check_model_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get('models', [])
                model_names = [model['name'] for model in models]
                
                if self.model_name in model_names:
                    logging.info(f"‚úÖ –ú–æ–¥–µ–ª—å '{self.model_name}' –¥–æ—Å—Ç—É–ø–Ω–∞")
                    return True
                else:
                    logging.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{self.model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {model_names}")
                    return False
            return False
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def send_mantra(self) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É –∫ AI –º–æ–¥–µ–ª–∏
        
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –º–æ–¥–µ–ª–∏
        """
        payload = {
            "model": self.model_name,
            "prompt": f"–ü–æ–≤—Ç–æ—Ä–∏ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É: {self.mantra}",
            "stream": False,
            "options": {
                "temperature": 0.7,
                "top_p": 0.9,
                "num_predict": 100
            }
        }
        
        try:
            logging.info(f"üïâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É: {self.mantra}")
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {result.get('response', '')[:100]}...")
                return result
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return {"error": f"HTTP {response.status_code}", "details": response.text}
                
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error": "Request failed", "details": str(e)}
        except json.JSONDecodeError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"error": "JSON parse error", "details": str(e)}
    
    def continuous_chant(self, interval: int = 60, max_requests: int = None):
        """
        –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (None = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        """
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥")
        logging.info(f"üïâÔ∏è –ú–∞—Ö–∞–º–∞–Ω—Ç—Ä–∞: {self.mantra}")
        
        request_count = 0
        
        try:
            while True:
                if max_requests and request_count >= max_requests:
                    logging.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {max_requests}")
                    break
                
                request_count += 1
                logging.info(f"üìù –ó–∞–ø—Ä–æ—Å #{request_count}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—É
                result = self.send_mantra()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if "error" not in result:
                    logging.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å #{request_count} —É—Å–ø–µ—à–µ–Ω")
                else:
                    logging.error(f"‚ùå –ó–∞–ø—Ä–æ—Å #{request_count} –Ω–µ—É–¥–∞—á–µ–Ω: {result.get('error')}")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                if max_requests and request_count >= max_requests:
                    break
                    
                logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                time.sleep(interval)
                
        except KeyboardInterrupt:
            logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count}")
    
    def change_language(self, new_language: str):
        """
        –ú–µ–Ω—è–µ—Ç —è–∑—ã–∫ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã
        
        Args:
            new_language: –ù–æ–≤—ã–π —è–∑—ã–∫ ("russian" –∏–ª–∏ "thai")
        """
        if new_language in self.mantras:
            self.language = new_language
            self.mantra = self.mantras[new_language]
            logging.info(f"üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_language}")
            logging.info(f"üïâÔ∏è –ù–æ–≤–∞—è –º–∞—Ö–∞–º–∞–Ω—Ç—Ä–∞: {self.mantra}")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {new_language}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(self.mantras.keys())}")
    
    def get_available_languages(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        return list(self.mantras.keys())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã –∫ AI Mozgach —á–µ—Ä–µ–∑ Ollama")
    parser.add_argument("--url", default="http://localhost:11434", help="URL Ollama —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--model", default="mozgach", help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    parser.add_argument("--interval", type=int, default=60, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--max-requests", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    parser.add_argument("--language", choices=["russian", "thai", "harkonnen", "atreides", "freemen"], default="russian", help="–Ø–∑—ã–∫ –º–∞—Ö–∞–º–∞–Ω—Ç—Ä—ã")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    chanter = ChantMantra(args.url, args.model, args.language)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if not chanter.check_model_availability():
        logging.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama.")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    logging.info(f"üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {', '.join(chanter.get_available_languages())}")
    logging.info(f"üåç –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {args.language}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    chanter.continuous_chant(args.interval, args.max_requests)

if __name__ == "__main__":
    main()

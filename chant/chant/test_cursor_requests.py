#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —á–∞–Ω—Ç–∏–Ω–≥–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∫—É—Ä—Å–æ—Ä–∞
"""

import requests
import time
import json
import threading
from typing import Optional

class CursorRequestTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞"""
    
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        
        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —á–∞–Ω—Ç–∏–Ω–≥–∞
        self.test_requests = {
            "russianscsm": [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ",
                "–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –ª—é–±–≤–∏",
                "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
            ],
            "thai": [
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
                "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏Ñ‡∏ß‡∏≠‡∏ô‡∏ï‡∏±‡∏°",
                "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏Å‡∏ß‡∏µ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å",
                "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó",
                "‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?"
            ],
            "harkonnen": [
                "·∏§ƒÅre, kƒÅma vartate?",
                "Viv·πõ·πáu kva·πá·π≠a-bhautikam",
                "LikhƒÅtu kƒÅvya·πÉ prema-vi·π£ayam",
                "Viv·πõ·πáu tƒÅntrika-jƒÅla-kriyƒÅ-pratipatti",
                "K·πõtrima-praj√±ƒÅ kim?"
            ]
        }
        
        # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.current_language_index = 0
        self.languages = list(self.test_requests.keys())
        
    def send_test_request(self, request: str, thread_id: Optional[int] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –ó–¥–µ—Å—å –º—ã –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ —á–∞–Ω—Ç–∏–Ω–≥–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç API endpoint
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {request[:50]}...")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫ –º–æ–¥–µ–ª–∏
            payload = {
                "model": "mozgach:latest",
                "prompt": request,
                "stream": False,
                "options": {
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "max_tokens": 200
                }
            }
            
            response = requests.post(f"{self.base_url}/api/generate", json=payload, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            answer = result.get('response', '')
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {answer[:100]}...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return False
            
    def run_continuous_test(self, interval: float = 5.0):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —è–∑—ã–∫–æ–≤"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
        print("üåç –†–æ—Ç–∞—Ü–∏—è —è–∑—ã–∫–æ–≤: russianscsm ‚Üí thai ‚Üí harkonnen")
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("-" * 60)
        
        request_index = 0
        
        try:
            while True:
                # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                current_language = self.languages[self.current_language_index % len(self.languages)]
                language_requests = self.test_requests[current_language]
                
                # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
                request = language_requests[request_index % len(language_requests)]
                
                print(f"üåç –Ø–∑—ã–∫: {current_language}")
                print(f"üìù –ó–∞–ø—Ä–æ—Å: {request}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                success = self.send_test_request(request)
                
                if success:
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å #{request_index + 1} –Ω–∞ —è–∑—ã–∫–µ {current_language} —É—Å–ø–µ—à–µ–Ω")
                else:
                    print(f"‚ùå –ó–∞–ø—Ä–æ—Å #{request_index + 1} –Ω–∞ —è–∑—ã–∫–µ {current_language} –Ω–µ—É–¥–∞—á–µ–Ω")
                
                request_index += 1
                self.current_language_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —è–∑—ã–∫—É
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {interval} —Å–µ–∫—É–Ω–¥...")
                time.sleep(interval)
                print("-" * 60)
                
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
    def run_burst_test(self, burst_size: int = 3, delay: float = 0.5):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —è–∑—ã–∫–æ–≤"""
        print(f"üí• –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {burst_size} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay}s")
        print("üåç –†–æ—Ç–∞—Ü–∏—è —è–∑—ã–∫–æ–≤: russianscsm ‚Üí thai ‚Üí harkonnen")
        print("-" * 60)
        
        for i in range(burst_size):
            # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            current_language = self.languages[self.current_language_index % len(self.languages)]
            language_requests = self.test_requests[current_language]
            
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
            request = language_requests[i % len(language_requests)]
            
            print(f"üåç –Ø–∑—ã–∫: {current_language}")
            print(f"üì§ –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å #{i + 1}: {request[:50]}...")
            
            success = self.send_test_request(request)
            
            if success:
                print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å #{i + 1} –Ω–∞ —è–∑—ã–∫–µ {current_language} —É—Å–ø–µ—à–µ–Ω")
            else:
                print(f"‚ùå –ü–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å #{i + 1} –Ω–∞ —è–∑—ã–∫–µ {current_language} –Ω–µ—É–¥–∞—á–µ–Ω")
            
            self.current_language_index += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —è–∑—ã–∫—É
                
            if i < burst_size - 1:
                print(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(delay)
                
        print("üèÅ –ü–∞–∫–µ—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    def run_interactive_test(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("üí° –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
        print("   - 'quit' –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("   - 'status' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
        print("   - 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        print("-" * 60)
        
        while True:
            try:
                user_input = input("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ").strip()
                
                if not user_input:
                    continue
                    
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                if user_input.lower() == 'status':
                    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –∞–∫—Ç–∏–≤–Ω–∞")
                    continue
                    
                if user_input.lower() == 'help':
                    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                    print("   - –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                    print("   - 'quit' –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
                    print("   - 'status' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                    print("   - 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                    continue
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
                detected_language = "russianscsm"
                if any(char in user_input for char in "‡∏Æ‡∏≤‡πÄ‡∏£‡∏Å‡∏§‡∏©‡∏ì‡∏∞‡∏£‡∏≤‡∏°"):
                    detected_language = "thai"
                elif any(char in user_input for char in "·∏§ƒÅreK·πõ·π£·πáaRƒÅma"):
                    detected_language = "harkonnen"
                
                print(f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {detected_language}")
                success = self.send_test_request(user_input)
                
                if success:
                    print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞")
    parser.add_argument("--url", default="http://localhost:11434", help="URL Ollama —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--mode", choices=["continuous", "burst", "interactive"], 
                       default="interactive", help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--interval", type=float, default=5.0, 
                       help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–¥–ª—è continuous —Ä–µ–∂–∏–º–∞)")
    parser.add_argument("--burst-size", type=int, default=3, 
                       help="–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (–¥–ª—è burst —Ä–µ–∂–∏–º–∞)")
    parser.add_argument("--delay", type=float, default=0.5, 
                       help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –ø–∞–∫–µ—Ç–µ (–¥–ª—è burst —Ä–µ–∂–∏–º–∞)")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = CursorRequestTester(args.url)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    if args.mode == "continuous":
        tester.run_continuous_test(args.interval)
    elif args.mode == "burst":
        tester.run_burst_test(args.burst_size, args.delay)
    else:  # interactive
        tester.run_interactive_test()

if __name__ == "__main__":
    main()
